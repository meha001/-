from flask import Flask, render_template, redirect, url_for, flash, session, request
from config import Config
from extensions import db, mail
from models import User
from forms import RegistrationForm, LoginForm
from flask_mail import Message
from itsdangerous import URLSafeTimedSerializer
from functools import wraps

serializer = URLSafeTimedSerializer(Config.SECRET_KEY)

def send_email(to, subject, body, app):
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞
    try:
        msg = Message(
            subject=subject,
            recipients=[to],
            body=body,
            sender=app.config.get('MAIL_DEFAULT_SENDER')
        )
        mail.send(msg)
        print(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞: {to}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email: {e}")
        flash('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 'danger')
        return False

def login_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            flash('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.', 'warning')
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    mail.init_app(app)

    with app.app_context():
        db.create_all() 
    
    @app.route('/')
    def index():
        return render_template('index.html')
    
    @app.route('/register', methods=['GET', 'POST'])
    def register():
        form = RegistrationForm()
        if form.validate_on_submit():
            existing_user = User.query.filter((User.email == form.email.data) | 
                                            (User.username == form.username.data)).first()
            if existing_user:
                flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.', 'danger')
                return render_template('register.html', form=form)
                
            user = User(username=form.username.data, email=form.email.data)
            user.set_password(form.password.data)
            db.session.add(user)
            db.session.commit()

            token = serializer.dumps(user.email, salt='email-confirm')
            confirm_url = url_for('confirm_email', token=token, _external=True)
            
            send_email(user.email, '–°–∞–π—Ç –®–∞—É—Ä–º–∞ –≤ –ü–∏—Ç–µü•ô', 
                      f'–ù–∞–∂–º–∏ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email, –ë—ã—Å—Ç—Ä–æ –æ—á–µ–Ω—å –ë—ã—Å—Ç—Ä–æ !!!: {confirm_url}', app)

            flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email.', 'success')
            return redirect(url_for('login'))
        return render_template('register.html', form=form)
    
    @app.route('/login', methods=['GET', 'POST'])
    def login():
        form = LoginForm()
        if form.validate_on_submit():
            user = User.query.filter_by(email=form.email.data).first()
            if user and user.check_password(form.password.data):
                # –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if not app.config.get('DEBUG', True) and not user.confirmed:
                    flash('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.', 'warning')
                    return render_template('login.html', form=form)
                    
                session.clear()
                session['user_id'] = user.id
                session['username'] = user.username
                flash('–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏.', 'success')
                return redirect(url_for('dashboard'))
            flash('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')
        return render_template('login.html', form=form)
    
    @app.route('/logout')
    def logout():
        session.clear()
        flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
        return redirect(url_for('index'))
    
    @app.route('/dashboard')
    @login_required
    def dashboard():
        user = User.query.get(session['user_id'])
        return render_template('dashboard.html', username=session.get('username'))

    @app.route('/confirm/<token>')
    def confirm_email(token):
        try:
            email = serializer.loads(token, salt='email-confirm', max_age=3600)
        except:
            flash('–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.', 'danger')
            return redirect(url_for('login'))
        
        user = User.query.filter_by(email=email).first_or_404()
        if user.confirmed:
            flash('Email —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.', 'info')
        else:
            user.confirmed = True
            db.session.commit()
            flash('Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏.', 'success')
        return redirect(url_for('login'))

    @app.route('/test-confirm/<email>')
    def test_confirm(email):
        """–ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑ email"""
        if not app.config.get('DEBUG', True):
            flash('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'danger')
            return redirect(url_for('index'))
            
        user = User.query.filter_by(email=email).first()
        if user:
            user.confirmed = True
            db.session.commit()
            flash(f'Email {email} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'success')
        else:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'danger')
        return redirect(url_for('login'))

    return app

if __name__ == '__main__':
    app = create_app()
    app.run(debug=True)